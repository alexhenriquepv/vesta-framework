{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Event-Driven Agent Framework","text":"<p>The Event-Driven Agent Framework is a Python framework designed to build intelligent agents that process events  from sensors, wearable devices, or any external system. It combines ProcessingTasks, which transform raw events into structured insights, and ActionTasks,  which allow the agent to trigger external actions (e.g., turning on alarms, sending notifications, or interacting with third-party APIs).</p>"},{"location":"#key-concepts","title":"\ud83d\udd11 Key Concepts","text":"<ul> <li> <p>Event   The basic unit of information the agent receives.   Example: a movement detection event, a low battery event, or a health metric reading.</p> </li> <li> <p>ProcessingTask   A task that analyzes incoming events and produces insights or predictions.   Example: detect if a person appears in a camera feed.</p> </li> <li> <p>ActionTask   A callable action that the LLM can execute to respond to an event.   Example: trigger an alarm or send a push notification.</p> </li> <li> <p>Planner   Orchestrates how events are processed and decides which actions (if any) should be executed. The planner leverages an LLM to interpret context and select appropriate actions.</p> </li> <li> <p>TaskRegistry   A central registry for all <code>ProcessingTasks</code> and <code>ActionTasks</code>. Developers extend the framework by registering new tasks.</p> </li> </ul>"},{"location":"#architecture-overview","title":"\u2699\ufe0f Architecture Overview","text":"<p>Incoming Event --&gt; EventOrchestrator --&gt; ProcessingTask --&gt; Planner (LLM) --&gt; ActionTask(s)</p> <ol> <li>EventOrchestrator receives an event and delegates it to the appropriate ProcessingTask.</li> <li>The ProcessingTask executes business logic and produces structured results.</li> <li>The Planner interprets the result using an LLM and selects one or more ActionTasks.</li> <li>The chosen ActionTasks are executed, producing side effects (e.g., notifications, alarms).</li> </ol>"},{"location":"#example-flow","title":"\ud83d\ude80 Example Flow","text":"<ol> <li>A movement is detected by the security system.  </li> <li><code>MovementDetectionTask</code> runs and returns:    ```json     {\"object_detected\": \"person\"}</li> <li>The Planner interprets this and decides to trigger the alarm:     ```json     {       \"function_call\": {         \"name\": \"turn_alarm_on\",         \"args\": { \"alarm_type\": \"Noise\" }       }     }</li> <li>The ActionTask executes and turns on the noise alarm.</li> </ol>"},{"location":"#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>Installation Guide </li> <li>Creating ActionTasks</li> <li>Creating ProcessingTasks </li> </ul>"},{"location":"actions/","title":"Creating ActionTasks","text":"<p>ActionTasks are functions the LLM can call to perform side effects (alarms, notifications, API calls).</p>"},{"location":"actions/#example-turning-on-an-alarm","title":"Example: Turning On an Alarm","text":""},{"location":"actions/#step-1-define-the-function","title":"Step 1 \u2014 Define the Function","text":"<p>Create a new action task inside <code>tasks/actions</code>.</p> <pre><code>def alert_emergency_contact(contact_name: str, message: str) -&gt; dict[str, str]:\n    return {\n        \"contact_name\": contact_name,\n        \"message\": message\n    }\n</code></pre>"},{"location":"actions/#step-2-create-the-declaration","title":"Step 2 - Create the declaration","text":"<p>In the same file, put the declaration variable.</p> <pre><code>alert_emergency_contact_declaration = {\n    \"name\": \"alert_emergency_contact\",\n    \"description\": \"Alerts an emergency contact with a specific message.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"contact_name\": {\n                \"type\": \"string\",\n                \"description\": \"The name of the emergency contact to notify.\"\n            },\n            \"message\": {\n                \"type\": \"string\",\n                \"description\": \"The message to send to the emergency contact.\"\n            }\n        },\n        \"required\": [\"contact_name\", \"message\"]\n    }\n}\n</code></pre>"},{"location":"actions/#step-3-register-the-action","title":"Step 3 - Register the Action","text":"<p>Go to file <code>tasks/__init__.py</code> and add a register for this action.</p> <pre><code>TaskRegistry.register_action(alert_emergency_contact)\n</code></pre>"},{"location":"install/","title":"Installation Guide","text":"<p>This guide explains how to set up the Framework.</p>"},{"location":"install/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>    git clone https://github.com/alexhenriquepv/vesta-framework.git\n    cd vesta-framework\n</code></pre>"},{"location":"install/#2-setup-virtual-environment","title":"2. Setup Virtual Environment","text":"<pre><code>    python -m venv .venv\n    source .venv/bin/activate   # Linux/macOS\n    .venv\\Scripts\\activate      # Windows\n</code></pre>"},{"location":"install/#3-install-dependencies","title":"3. Install Dependencies","text":"<pre><code>  pip install -r requirements.txt\n</code></pre>"},{"location":"install/#4-configure-environment-variables","title":"4. Configure Environment Variables","text":"<p>Create a <code>.env</code> file in the root folder:</p> <pre><code>GOOGLE_API_KEY=your_api_key_here\n</code></pre>"},{"location":"install/#5-run-the-service","title":"5. Run the service","text":"<pre><code>  uvicorn main:app --reload\n</code></pre> <p>Open Swagger UI:</p> <p>\ud83d\udc49 http://127.0.0.1:8000/docs</p>"},{"location":"processing/","title":"Creating ProcessingTasks","text":"<p>ProcessingTasks handle event input and output structured results. They must not perform external actions directly.</p>"},{"location":"processing/#example-heart-rate-anomaly-detection","title":"Example: Heart Rate Anomaly Detection","text":"<p>Create new action inside <code>actions/processing</code></p> <pre><code>class LowBatteryTask(ProcessingTask):\n\n    def __init__(self, event: Event):\n        super().__init__(event=event, prompt_name=\"low_battery\")\n\n    @property\n    def action_registry(self) -&gt; dict:\n        return {\n            \"alert_emergency_contact\": alert_emergency_contact,\n        }\n\n    def run(self):\n        return {\n            \"battery_levels\": self.event.data,\n            \"user_profile\": get_user_profile()\n        }\n</code></pre>"},{"location":"processing/#registering-the-task","title":"Registering the Task","text":"<p>Go to <code>tasks/__init__.py</code> and add register for this action.</p> <pre><code>TaskRegistry.register_processing(HeartRateAnomalyTask)\n</code></pre>"}]}